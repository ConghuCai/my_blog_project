<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.conghucai.blogms.mapper.GiteeUserMapper">
  <resultMap id="BaseResultMap" type="site.conghucai.blogms.model.GiteeUser">
    <id column="login" jdbcType="VARCHAR" property="login" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="html_url" jdbcType="VARCHAR" property="htmlUrl" />
    <result column="avatar_url" jdbcType="VARCHAR" property="avatarUrl" />
    <result column="bio" jdbcType="VARCHAR" property="bio" />
    <result column="created_at" jdbcType="VARCHAR" property="createdAt" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="watched" jdbcType="INTEGER" property="watched" />
    <result column="followers" jdbcType="INTEGER" property="followers" />
    <result column="stared" jdbcType="INTEGER" property="stared" />
  </resultMap>
  <sql id="Base_Column_List">
    login, name, html_url, avatar_url, bio, created_at, email, watched, followers, stared
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_user
    where login = #{login,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_user
    where login = #{login,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="site.conghucai.blogms.model.GiteeUser">
    insert into t_user (login, name, html_url, 
      avatar_url, bio, created_at, 
      email, watched, followers, 
      stared)
    values (#{login,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{htmlUrl,jdbcType=VARCHAR}, 
      #{avatarUrl,jdbcType=VARCHAR}, #{bio,jdbcType=VARCHAR}, #{createdAt,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{watched,jdbcType=INTEGER}, #{followers,jdbcType=INTEGER}, 
      #{stared,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="site.conghucai.blogms.model.GiteeUser">
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="login != null">
        login,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="htmlUrl != null">
        html_url,
      </if>
      <if test="avatarUrl != null">
        avatar_url,
      </if>
      <if test="bio != null">
        bio,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="watched != null">
        watched,
      </if>
      <if test="followers != null">
        followers,
      </if>
      <if test="stared != null">
        stared,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="login != null">
        #{login,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="htmlUrl != null">
        #{htmlUrl,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="bio != null">
        #{bio,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="watched != null">
        #{watched,jdbcType=INTEGER},
      </if>
      <if test="followers != null">
        #{followers,jdbcType=INTEGER},
      </if>
      <if test="stared != null">
        #{stared,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="site.conghucai.blogms.model.GiteeUser">
    update t_user
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="htmlUrl != null">
        html_url = #{htmlUrl,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="bio != null">
        bio = #{bio,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="watched != null">
        watched = #{watched,jdbcType=INTEGER},
      </if>
      <if test="followers != null">
        followers = #{followers,jdbcType=INTEGER},
      </if>
      <if test="stared != null">
        stared = #{stared,jdbcType=INTEGER},
      </if>
    </set>
    where login = #{login,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="site.conghucai.blogms.model.GiteeUser">
    update t_user
    set name = #{name,jdbcType=VARCHAR},
      html_url = #{htmlUrl,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      bio = #{bio,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      watched = #{watched,jdbcType=INTEGER},
      followers = #{followers,jdbcType=INTEGER},
      stared = #{stared,jdbcType=INTEGER}
    where login = #{login,jdbcType=VARCHAR}
  </update>

  <select id="selectUserInterStat" resultType="Map">
    select login, min(`name`) as `name`, sum(res) as inter
    from
    (
        (
            select u.login, u.`name`, count(m.id) as res
            from t_user u left join t_message m on u.login = m.`user`
            group by login
        )
        union all
        (
            select u.login, u.`name`, count(c.id) as res
            from t_user u left join t_comment c on u.login = c.user_login
            group by login
        )
    ) t
    group by login
    order by inter desc
    limit 0, 5
  </select>

  <select id="selectAllUserList" resultType="Map">
    select login, `name`, watched, followers, stared, substring(date, 1, 10) as date, avatar, ifnull(bio, 'nothing writen') as bio, ifnull(email, 'nothing writen') as email, home, sum(inter) as inter
    from
    (
        (
            select u.login, u.`name`, u.watched, u.followers, u.stared, u.created_at as date, u.avatar_url as avatar, u.bio, u.email, u.html_url as home, count(m.message) as inter
            from t_user u left join t_message m on u.login = m.`user`
            group by u.login, u.`name`, u.watched, u.followers, u.stared, u.created_at, u.avatar_url, u.bio, u.email, u.html_url
        ) union all
        (
            select u.login, u.`name`, u.watched, u.followers, u.stared, u.created_at as date, u.avatar_url as avatar, u.bio, u.email, u.html_url as home, count(c.content) as inter
            from t_user u left join t_comment c on u.login = c.user_login
            group by u.login, u.`name`, u.watched, u.followers, u.stared, u.created_at, u.avatar_url, u.bio, u.email, u.html_url
        )
    ) t
    group by login, `name`, watched, followers, stared, date, avatar, bio, email, home
  </select>

</mapper>